#! /usr/bin/perl

# my job is to take a big playlist file and feed random tracks from it
# into the queue, aiming to keep the unplayed queue length at $sql.

use strict;
use warnings;
use Audio::MPD;
use File::Spec;
use Cwd qw(abs_path);

my @mediafileexts=qw(mp3 mpc flac ogg m4a m4b);
my $sql=10; # try to keep this many items in the queue
my $interval=60; # check every this-many seconds

my $mf=join('|',@mediafileexts);

# get the normalised filenames from the playlist
my @list;
foreach my $file (@ARGV) {
  my $base=$file;
  $base =~ s/\/[^\/]*$//;
  open PL,"<$file";
  while (<PL>) {
    chomp;
    if (/\.($mf)$/i) {
      s/^\.\.\///;
      push @list,$_;
    }
  }
  close PL;
}

# perform the initial shuffle
{
  my @index=(0..$#list);
  for (my $a=$#index;$a>0;$a--) {
    my $b=int(rand()*($a+1));
    if ($a!=$b) {
      ($index[$a],$index[$b])=($index[$b],$index[$a]);
    }
  }
  @list=map {$list[$_]} @index;
}

my $s=scalar @list;
my $ri=int($s*0.5);             # minimum repeat interval
my $loffset=$ri;
my $lscale=($s-$ri);

my $timeout=0;
my $mpd=Audio::MPD->new(host => 'localhost');
my $coll=$mpd->collection;
while (1) {
  my $status=$mpd->status;
  if (($timeout && $status->state eq 'stop')) {
    exit 0;
  } else {
    my $pl=$status->playlistlength;
    if ($status->state ne 'stop') {
      $pl-=$status->song;
    }
    while ($pl < $sql) {
      my $n=shift @list;
      my @s=$coll->songs_with_filename_partial($n);
      if (@s) {
        $mpd->playlist->add($s[0]->file);
        $pl++;
      }
      my $pos=int(rand()*$lscale+$loffset);
      splice @list,$pos,0,$n;
    }
  }
  sleep $interval;
  $timeout=1;
}

sub get_meta {
  my $f=shift;
  my %o;
  {
    my @y=split '/',$f->file;
    $o{title}=pop @y;
    $o{title} =~ s/^\d+[-. _]*//;
    $o{title} =~ s/\.[a-z\d]+$//;
    $o{album}='';
    if ($y[0] eq 'Classical') {
      $o{artist}=$y[1] || '';
      $o{album}=$y[3] || '';
    } elsif ($y[0] eq 'Popular') {
      $o{artist}=$y[1] || '';
      $o{album}=$y[2] || '';
    } elsif ($y[0] eq 'Soundtrack') {
      $o{artist}=$y[2] || '';
      $o{album}=$y[3] || '';
    }
    $o{album} =~ s/^\d+[- _]*//;
  }
  $o{title}=$f->title || $o{title};
  $o{artist}=$f->artist || $o{artist};
  $o{album}=$f->album || $o{album};
  {
    $o{len}=$f->time || 0;
    my $mm=int($o{len}/60);
    my $ss=$o{len} % 60;
    $o{length}=sprintf('%04d:%02d',$mm,$ss);
    $o{length} =~ s/^0+//;
    $o{length} =~ s/^:/0:/;
  }
  $o{id}=$f->id;
  return \%o;
}
